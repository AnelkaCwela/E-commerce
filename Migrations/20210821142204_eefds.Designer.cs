// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OurShop.Models;

namespace OurShop.Migrations
{
    [DbContext(typeof(DBCONTEX))]
    [Migration("20210821142204_eefds")]
    partial class eefds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.BrandDeatailModel", b =>
                {
                    b.Property<Guid>("BrandDeatailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BussneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("BussnessRegistration")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("IdentityDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandDeatailId");

                    b.ToTable("BrandDeatailTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.BrandModel", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("BrandLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BrandSlogn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BrandId");

                    b.ToTable("BrandModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.CategoryModel", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("CategoryModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.CityModel", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("CityModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ColorModel", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("ColorModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ContactDetailModel", b =>
                {
                    b.Property<Guid>("ContactDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactDetailId");

                    b.HasIndex("BrandId");

                    b.ToTable("ContactDetailTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.CustomerModel", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.DeliveryModel", b =>
                {
                    b.Property<Guid>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QoutationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("deliverydate")
                        .HasColumnType("datetime2");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DeliveryStatuseId");

                    b.HasIndex("QoutationId");

                    b.ToTable("DeliveryModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.DeliveryStatuseModel", b =>
                {
                    b.Property<Guid>("DeliveryStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatuseDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatuseId");

                    b.ToTable("DeliveryStatuseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.GanderModel", b =>
                {
                    b.Property<Guid>("GanderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gander")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GanderId");

                    b.ToTable("GanderModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ImageModel", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IteamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageId");

                    b.HasIndex("IteamId");

                    b.ToTable("ImageModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.IteamDetailModel", b =>
                {
                    b.Property<Guid>("IteamDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IteamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfIteam")
                        .HasColumnType("int");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Stock")
                        .HasColumnType("bit");

                    b.HasKey("IteamDetailId");

                    b.HasIndex("ColorId");

                    b.HasIndex("IteamId");

                    b.HasIndex("SizeId");

                    b.ToTable("IteamDetailTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.IteamModel", b =>
                {
                    b.Property<Guid>("IteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("GanderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageIteam")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IteamStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ItermDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItermName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IteamId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GanderId");

                    b.HasIndex("IteamStatuseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("IteamModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.IteamStatuseModel", b =>
                {
                    b.Property<Guid>("IteamStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IteamStatuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IteamStatuseId");

                    b.ToTable("IteamStatuseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.LikeModel", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IteamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.HasKey("LikeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IteamId");

                    b.ToTable("LikeModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.LocationModel", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Long")
                        .HasColumnType("real");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("LocationModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.OderTypeModel", b =>
                {
                    b.Property<Guid>("OderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OderTypeId");

                    b.ToTable("OderTypeTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.PaymentTypeModel", b =>
                {
                    b.Property<Guid>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypeModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QoutationBySuplierModel", b =>
                {
                    b.Property<Guid>("QoutationStatuseSuplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QoutationStatuseSuplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QoutationStatuseSuplierId");

                    b.ToTable("QoutationBySuplierTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QoutationStatuseModel", b =>
                {
                    b.Property<Guid>("QoutationStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QoutationStatuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QoutationStatuseId");

                    b.ToTable("QoutationStatuseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QuotationDetailModel", b =>
                {
                    b.Property<Guid>("QoutationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IteamDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QoutationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantty")
                        .HasColumnType("int");

                    b.HasKey("QoutationDetailId");

                    b.HasIndex("IteamDetailId");

                    b.HasIndex("QoutationId");

                    b.ToTable("QuotationDetailModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QuotationModel", b =>
                {
                    b.Property<Guid>("QoutationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OderTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("QoutationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QoutationStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QoutationStatuseSuplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Refrance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubrbId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalQoutationPrice")
                        .HasColumnType("float");

                    b.HasKey("QoutationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OderTypeId");

                    b.HasIndex("QoutationStatuseId");

                    b.HasIndex("QoutationStatuseSuplierId");

                    b.HasIndex("SubrbId");

                    b.ToTable("QuotationModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.RatingModel", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RatingTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ReserveModel", b =>
                {
                    b.Property<Guid>("ReserveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReserveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceReserveStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceReserveStatuseModelServiceReserveStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReserveId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceReserveStatuseModelServiceReserveStatuseId");

                    b.ToTable("ReserveTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ResidentModel", b =>
                {
                    b.Property<Guid>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResidentId");

                    b.HasIndex("CityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ResidentModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceCategoryModel", b =>
                {
                    b.Property<Guid>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCategoryId");

                    b.ToTable("ServiceCategoryTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceModel", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ServicePhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeviceStauseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("desctription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SeviceStauseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ServiceTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceReserveStatuseModel", b =>
                {
                    b.Property<Guid>("ServiceReserveStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceReserveStatuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceReserveStatuseId");

                    b.ToTable("ServiceReserveStatuseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceTypeModel", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypeTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SeviceStauseModel", b =>
                {
                    b.Property<Guid>("SeviceStauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeviceStause")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeviceStauseId");

                    b.ToTable("SeviceStauseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SizeModel", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("SizeModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.StatusModel", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Statuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("StatusTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SububModel", b =>
                {
                    b.Property<Guid>("SubrbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubrbId");

                    b.HasIndex("CityId");

                    b.ToTable("SububTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SupplierModel", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandDeatailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistartionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierStatuseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.HasIndex("BrandDeatailId");

                    b.HasIndex("BrandId");

                    b.HasIndex("SupplierStatuseId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("SupplierModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SupplierStatuseModel", b =>
                {
                    b.Property<Guid>("SupplierStatuseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierStatuse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierStatuseId");

                    b.ToTable("SupplierStatuseTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SupplierTypeModel", b =>
                {
                    b.Property<Guid>("SupplierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierTypeId");

                    b.ToTable("SupplierTypeTbl");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.TypeModel", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("TypeModelTbl");
                });

            modelBuilder.Entity("OurShop.Models.UserPlusModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Bool")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OurShop.Models.UserPlusModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OurShop.Models.UserPlusModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.UserPlusModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OurShop.Models.UserPlusModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OurShop.Models.DataModel.CategoryModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.TypeModel", "TypeModel")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ContactDetailModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.BrandModel", "SupplierModel")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.DeliveryModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.DeliveryStatuseModel", "DeliveryStatuse")
                        .WithMany()
                        .HasForeignKey("DeliveryStatuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.QuotationModel", "QuotationModel")
                        .WithMany()
                        .HasForeignKey("QoutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryStatuse");

                    b.Navigation("QuotationModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ImageModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.IteamModel", "IteamModel")
                        .WithMany()
                        .HasForeignKey("IteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IteamModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.IteamDetailModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.ColorModel", "ColorModel")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.IteamModel", "IteamModel")
                        .WithMany()
                        .HasForeignKey("IteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SizeModel", "SizeModel")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorModel");

                    b.Navigation("IteamModel");

                    b.Navigation("SizeModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.IteamModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CategoryModel", "CategoryModel")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.GanderModel", "GanderModel")
                        .WithMany()
                        .HasForeignKey("GanderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.IteamStatuseModel", "IteamStatuseModel")
                        .WithMany()
                        .HasForeignKey("IteamStatuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierModel", "SupplierModel")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryModel");

                    b.Navigation("GanderModel");

                    b.Navigation("IteamStatuseModel");

                    b.Navigation("SupplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.LikeModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.IteamModel", "IteamModel")
                        .WithMany()
                        .HasForeignKey("IteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("IteamModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.LocationModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.SupplierModel", "supplierModel")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("supplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QuotationDetailModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.IteamDetailModel", "IteamModel")
                        .WithMany()
                        .HasForeignKey("IteamDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.QuotationModel", "QuotationModel")
                        .WithMany()
                        .HasForeignKey("QoutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IteamModel");

                    b.Navigation("QuotationModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.QuotationModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.OderTypeModel", "OderTypeModel")
                        .WithMany()
                        .HasForeignKey("OderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.QoutationStatuseModel", "QoutationStatuseModel")
                        .WithMany()
                        .HasForeignKey("QoutationStatuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.QoutationBySuplierModel", "QoutationBySuplierModel")
                        .WithMany()
                        .HasForeignKey("QoutationStatuseSuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SububModel", "SububModel")
                        .WithMany()
                        .HasForeignKey("SubrbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OderTypeModel");

                    b.Navigation("QoutationBySuplierModel");

                    b.Navigation("QoutationStatuseModel");

                    b.Navigation("SububModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.RatingModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CustomerModel", "CustomerModel")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierModel", "supplierModel")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerModel");

                    b.Navigation("supplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ReserveModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.ServiceModel", "ServiceModel")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.ServiceReserveStatuseModel", "ServiceReserveStatuseModel")
                        .WithMany()
                        .HasForeignKey("ServiceReserveStatuseModelServiceReserveStatuseId");

                    b.Navigation("Customer");

                    b.Navigation("ServiceModel");

                    b.Navigation("ServiceReserveStatuseModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ResidentModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CityModel", "CityModel")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierModel", "SupplierModel")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityModel");

                    b.Navigation("SupplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.ServiceTypeModel", "ServiceTypeModel")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SeviceStauseModel", "SeviceStauseModel")
                        .WithMany()
                        .HasForeignKey("SeviceStauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierModel", "SupplierModel")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTypeModel");

                    b.Navigation("SeviceStauseModel");

                    b.Navigation("SupplierModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.ServiceTypeModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.ServiceCategoryModel", "ServiceCategoryModel")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategoryModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SububModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.CityModel", "CityModel")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityModel");
                });

            modelBuilder.Entity("OurShop.Models.DataModel.SupplierModel", b =>
                {
                    b.HasOne("OurShop.Models.DataModel.BrandDeatailModel", "BrandDeatailModel")
                        .WithMany()
                        .HasForeignKey("BrandDeatailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.BrandModel", "BrandModel")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierStatuseModel", "SupplierStatuseModel")
                        .WithMany()
                        .HasForeignKey("SupplierStatuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurShop.Models.DataModel.SupplierTypeModel", "SupplierTypeModel")
                        .WithMany()
                        .HasForeignKey("SupplierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandDeatailModel");

                    b.Navigation("BrandModel");

                    b.Navigation("SupplierStatuseModel");

                    b.Navigation("SupplierTypeModel");
                });
#pragma warning restore 612, 618
        }
    }
}
